/*
 *******************************************************************************
 *  IBM Globalization
 *  IBM Confidential / Copyright (C) IBM Corp. 2015 
 *******************************************************************************
 */
package com.ibm.gaas.ui;

import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.util.Iterator;
import java.util.Properties;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONException;
import org.json.JSONObject;

import com.ibm.gaas.requests.DownloadGetRequest;
import com.ibm.gaas.requests.RestCallException;
import com.ibm.gaas.services.APIKeyService;
import com.ibm.gaas.services.LocaleService;
import com.ibm.gaas.services.TranslationProject;

/**
 * Servlet implementation class ResourceDownloadServlet
 */
@WebServlet("/download")
public class ResourceDownloadServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ResourceDownloadServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

    private String getFileName(String fileType, TranslationProject project) {
    	String fileName = null;
    	
    	if(fileType.equalsIgnoreCase("json")) {
			fileName = project.getProjectID() + "-" + 
						project.getLanguage() + "." + 
						"json";
		}
		else if (fileType.equalsIgnoreCase("properties")) {
			String language = project.getLanguage();
			language = language.replace("-", "_");
			
			fileName = project.getProjectID() + "_" + 
					language + "." + 
					"properties";
		}
		else if(fileType.equalsIgnoreCase("js")) {
			fileName = project.getProjectID() + "-" + 
					project.getLanguage() + "." + 
					"js";
		}
		else {
			fileName = project.getProjectID();
		}
    	
    	return fileName;
    }
    
    
    
    
	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		TranslationProject project = new TranslationProject();
		
		try {	//try to pass AppScan
			JSONObject jsonParam = new JSONObject();
			jsonParam.put("languageID", request.getParameter("languageID"));
			jsonParam.put("projectID", request.getParameter("projectID"));
			project.setLanguage(jsonParam.getString("languageID"));
			project.setProjectID(jsonParam.getString("projectID"));
		} catch (JSONException e1) {
			throw new ServletException(e1);
		}
		
		// Read all the parameters for the file download request
		project.setApiKey(APIKeyService.$.getCurrentAPIKey(request));
		String fileType = request.getParameter("filetype");
		
		DownloadGetRequest message = new DownloadGetRequest(project);
		
		try {
			JSONObject pairs = message.getTranslateResults(LocaleService.$.getCurrentLocale(request));
			
			String fileName = getFileName(fileType, project);
			
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", String.format("attachment; filename=\"%s\"", fileName));
			if (fileType.equalsIgnoreCase("properties")) {
				response.setCharacterEncoding("8859_1");
			} else {
				response.setCharacterEncoding("UTF-8");
			}
			
			if(fileType.equalsIgnoreCase("json")) {
				Writer writer = response.getWriter();
				// just write the raw output
				writer.write(pairs.toString(4));
				// Flush and close the stream
				writer.flush();
				writer.close();
			}
			else if(fileType.equalsIgnoreCase("properties")) {
				OutputStream os = response.getOutputStream();
				Properties props = new Properties();
				
				@SuppressWarnings("unchecked")
				Iterator<String> keys = pairs.keys();
				while(keys.hasNext()) {
					String key = keys.next();
					String value = pairs.getString(key);
					props.setProperty(key, value);
				}
				props.store(os, "Generated by IBM Globalization");
				os.flush();
				os.close();
			}
			else if(fileType.equalsIgnoreCase("js")) {
				Writer writer = response.getWriter();
				AMDProperties props = new AMDProperties(pairs, project.getLanguage());
				props.store(writer, "Generated by IBM Globalization");
				// Flush and close the stream
				writer.flush();
				writer.close();
			}
		   
						
		}
		
		// we had a serious problem in the servlet generating the file
		catch(RestCallException e) {
			int code = e.getCode();
			String messageString = e.getMessage();
			UIServlet.sendError(response, code, messageString);
		} catch (Exception e) {
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}

}
